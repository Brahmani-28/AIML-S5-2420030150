{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOJbv+LH3GDVdQ2LgskAOYU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":[],"metadata":{"id":"hNd1IHZYPWII"}},{"cell_type":"markdown","source":["-------BFS----------"],"metadata":{"id":"rAZy41U_PX3i"}},{"cell_type":"code","source":["from collections import deque\n","\n","# Possible moves: up, down, left, right\n","MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n","\n","# Check if the next cell is inside bounds, walkable, and not yet visited\n","def can_visit(board, r, c, seen):\n","    rows, cols = len(board), len(board[0])\n","    return 0 <= r < rows and 0 <= c < cols and board[r][c] == 0 and (r, c) not in seen\n","\n","# Trace back the path using the parent dictionary\n","def build_path(parent_map, target):\n","    route = []\n","    while target in parent_map:\n","        route.append(target)\n","        target = parent_map[target]\n","    route.append(target)  # add start\n","    return route[::-1]\n","\n","# BFS for shortest path in grid\n","def shortest_path_bfs(board, start_pos, end_pos):\n","    q = deque([start_pos])\n","    seen = {start_pos}\n","    parent_map = {}\n","\n","    while q:\n","        cur = q.popleft()\n","\n","        if cur == end_pos:\n","            path_taken = build_path(parent_map, end_pos)\n","            return path_taken, len(path_taken) - 1  # cost is edges count\n","\n","        for dr, dc in MOVES:\n","            nr, nc = cur[0] + dr, cur[1] + dc\n","            next_cell = (nr, nc)\n","\n","            if can_visit(board, nr, nc, seen):\n","                q.append(next_cell)\n","                seen.add(next_cell)\n","                parent_map[next_cell] = cur\n","\n","    return None, -1  # No valid route found\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    maze = [\n","        [0, 1, 0, 0, 0],\n","        [0, 1, 0, 1, 0],\n","        [0, 0, 0, 1, 0],\n","        [1, 1, 0, 1, 0],\n","        [0, 0, 0, 0, 0]\n","    ]\n","\n","    start_cell = (0, 0)\n","    goal_cell = (4, 4)\n","\n","    route, steps = shortest_path_bfs(maze, start_cell, goal_cell)\n","\n","    if route:\n","        print(\"Shortest Path:\", route)\n","        print(\"Steps Required:\", steps)\n","    else:\n","        print(\"No possible path found.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aX1qMBYTPZW-","executionInfo":{"status":"ok","timestamp":1754901240597,"user_tz":-330,"elapsed":30,"user":{"displayName":"PULLAPATHURU BRAHMANI 2420030150","userId":"05105151881929643956"}},"outputId":"894b5a14-5be3-45cc-ee34-4bf14077a6e7"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Shortest Path: [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (4, 2), (4, 3), (4, 4)]\n","Steps Required: 8\n"]}]},{"cell_type":"markdown","source":["------DFS--------"],"metadata":{"id":"AQRLC4hRROTc"}},{"cell_type":"code","source":["# Directions: up, down, left, right\n","MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n","\n","# Check if the cell is inside bounds, walkable, and not visited yet\n","def can_move(board, r, c, seen):\n","    max_r, max_c = len(board), len(board[0])\n","    return 0 <= r < max_r and 0 <= c < max_c and board[r][c] == 0 and (r, c) not in seen\n","\n","# Rebuild the route from goal to start using parent mapping\n","def trace_route(parent_map, goal_node):\n","    route = []\n","    while goal_node in parent_map:\n","        route.append(goal_node)\n","        goal_node = parent_map[goal_node]\n","    route.append(goal_node)  # Add the starting cell\n","    return route[::-1]\n","\n","# Depth-First Search implementation\n","def dfs_pathfinder(board, start_cell, end_cell):\n","    stack = [start_cell]\n","    seen = {start_cell}\n","    parent_map = {}\n","\n","    while stack:\n","        cur_cell = stack.pop()\n","\n","        if cur_cell == end_cell:\n","            full_path = trace_route(parent_map, end_cell)\n","            return full_path, len(full_path) - 1\n","\n","        for dr, dc in MOVES:\n","            nr, nc = cur_cell[0] + dr, cur_cell[1] + dc\n","            next_cell = (nr, nc)\n","\n","            if can_move(board, nr, nc, seen):\n","                stack.append(next_cell)\n","                seen.add(next_cell)\n","                parent_map[next_cell] = cur_cell\n","\n","    return None, -1  # No path exists\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    maze = [\n","        [0, 1, 0, 0, 0],\n","        [0, 1, 0, 1, 0],\n","        [0, 0, 0, 1, 0],\n","        [1, 1, 0, 1, 0],\n","        [0, 0, 0, 0, 0]\n","    ]\n","\n","    start_point = (0, 0)\n","    goal_point = (4, 4)\n","\n","    path_result, step_count = dfs_pathfinder(maze, start_point, goal_point)\n","\n","    if path_result:\n","        print(\"DFS Path:\", path_result)\n","        print(\"Steps Taken:\", step_count)\n","    else:\n","        print(\"No path found.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B3pOwsu1RRUo","executionInfo":{"status":"ok","timestamp":1754901567025,"user_tz":-330,"elapsed":120,"user":{"displayName":"PULLAPATHURU BRAHMANI 2420030150","userId":"05105151881929643956"}},"outputId":"99f9627a-1d1b-48fa-ecc4-4b81c70705b1"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["DFS Path: [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (4, 2), (4, 3), (4, 4)]\n","Steps Taken: 8\n"]}]},{"cell_type":"markdown","source":["------A*---------"],"metadata":{"id":"qYatoY6SXEkU"}},{"cell_type":"code","source":["import heapq\n","\n","# Movements: up, down, left, right\n","MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n","\n","# Manhattan distance heuristic\n","def manhattan_dist(p1, p2):\n","    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n","\n","# Check if the position is within bounds and not blocked\n","def can_travel(map_grid, r, c):\n","    rows, cols = len(map_grid), len(map_grid[0])\n","    return 0 <= r < rows and 0 <= c < cols and map_grid[r][c] == 0\n","\n","# Backtrack to build the path\n","def build_path(parent_map, end_node):\n","    route = []\n","    while end_node in parent_map:\n","        route.append(end_node)\n","        end_node = parent_map[end_node]\n","    route.append(end_node)\n","    return route[::-1]\n","\n","# A* Pathfinding\n","def a_star_search(map_grid, start_node, target_node):\n","    open_queue = [(manhattan_dist(start_node, target_node), 0, start_node)]  # (f, g, node)\n","    heapq.heapify(open_queue)\n","\n","    came_from = {}\n","    g_costs = {start_node: 0}\n","    explored = set()\n","\n","    while open_queue:\n","        _, g_val, current_node = heapq.heappop(open_queue)\n","\n","        if current_node == target_node:\n","            final_path = build_path(came_from, target_node)\n","            return final_path, g_val\n","\n","        if current_node in explored:\n","            continue\n","        explored.add(current_node)\n","\n","        for dr, dc in MOVES:\n","            nr, nc = current_node[0] + dr, current_node[1] + dc\n","            neighbor = (nr, nc)\n","\n","            if can_travel(map_grid, nr, nc):\n","                new_g = g_val + 1\n","                if neighbor not in g_costs or new_g < g_costs[neighbor]:\n","                    g_costs[neighbor] = new_g\n","                    f_val = new_g + manhattan_dist(neighbor, target_node)\n","                    came_from[neighbor] = current_node\n","                    heapq.heappush(open_queue, (f_val, new_g, neighbor))\n","\n","    return None, -1  # No valid path\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    maze_map = [\n","        [0, 1, 0, 0, 0],\n","        [0, 1, 0, 1, 0],\n","        [0, 0, 0, 1, 0],\n","        [1, 1, 0, 1, 0],\n","        [0, 0, 0, 0, 0]\n","    ]\n","\n","    start_pos = (0, 0)\n","    goal_pos = (4, 4)\n","\n","    path_found, path_cost = a_star_search(maze_map, start_pos, goal_pos)\n","\n","    if path_found:\n","        print(\"A* Path:\", path_found)\n","        print(\"Total Cost:\", path_cost)\n","    else:\n","        print(\"No path found.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EhLxXYZxXGqj","executionInfo":{"status":"ok","timestamp":1754902916020,"user_tz":-330,"elapsed":27,"user":{"displayName":"PULLAPATHURU BRAHMANI 2420030150","userId":"05105151881929643956"}},"outputId":"afd6daaf-6eae-48f7-a682-978163363c6f"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["A* Path: [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (4, 2), (4, 3), (4, 4)]\n","Total Cost: 8\n"]}]}]}
